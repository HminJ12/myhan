github - 대표적인 버전관리 시스템
형상관리 시스템

git -프레임워크 대표 주자

중요한 변화가 일어난 시점을 (형상)버전이라고 한다.
파일은 하나만 만들고 원하는 시점으로 돌아가서 사용. 
변화하는 기록을 기록
하나의 파일에서 특정한 기록을 찾을 수 있도록 하는 것.

자기 컴퓨터에만 저장 됐는데 원격에서도 저장할 수 있도록 사용하는 것, 클라우드 시스템으로 사용할 수 있음 -> github

동기화가 목적임 -> 큰 파일은  못 올림. 
코드소스만 옮겨 가지고 다니는 거다.


여러 명이서 파일을 동시에 사용할 수 있어서 프로젝트로 사용가능.

사용목적
1.버전관리 목적
2.공유나 협업 목적으로 사용함

예전(도스)에는 cli  환경에서 작동함 git hub
명령어를 입력해야 함.
Console log interface 환경
글자 입력할 수 있는 창
 -유튜브 강좌로 배우기.

gui
Graphic User Interface 환경 
Source Tree로 개념 배우기

원래는 git 설치 후, gitHub 가입해야 함.
소스트리 설치 후 git 설치하면 됨.

github 가입 이메일

네임 HminJ12

아틀라시안
계정 

-------------------
소스트리
연동방법
처음 연동할 때 create 누른 후, 연결할 폴더 안에 아무 것도 없어야 한다.

저장소를 생성해야 함. 리퍼짓토리
세분화로 저장소 관리하는 게 좋다.
프로젝트별로 따로따로 해야 관리가 쉽다.

origin 원격 하나일 때 디폴트 원격

업로드 push
다운로즈 pull

stage all 누른 후, 반드시 commit 눌러야 함.
save는 commit
안 누르면 기록이 안 됨.
버전 기록을 먼저 남겨야 한다.

그 다음에 업로드를 해야 한다.

remember password 공용pc에서는 체크하지 말 것.

password를 잘 기억해야 한다.(git에서 토큰을 받은 후)
git에서 세팅 디벨롭 세팅 토큰 선택
토큰 따로 저장해야 한다.

Expiration 토큰 유효기간은 No expiration 선택
select scopes에서 repo 꼭 체크해야 함


깃허브 사용할 때 여러 프로그램 같이 쓰면 충돌 생김
학원에서 쓰는 거 하나 받아야 함
집에서 쓰는 거 하나 받아야 함
비밀번호 같은 거 쓰면 충돌생김


버전관리 시작하려면 create를 누른다.
저장소에서 토큰 받으면 연동하려고.

집에서 빈폴더 만들어야 함
이미 리파짓토리가 있을 경우, clone을 누른다.
토큰 새로 받아야 한다.

git 코드에서 주소를 찾는다.


토큰이 꼬일 때가 있다. (토큰 재입력해야 하는 경우)
1. 일단 소스트리를 종료한다.
내 PC - C드라이브 - 사용자 - 사용자 이름을 찾아간다 - AppDate - Local - Atlaasian - Source Tree - passwd랑 userhosts를 지운다.

다시 소스트리를 켠 다음 push를 누르면 된다.
그리고 다시 로그인을 한다.

----------------------------------
.git이 있는 폴더는 이미 버전관리를 하고 있다.
.git 폴더가 있으면 다시는 create를 하지 못 한다.
절대 지우면 안 된다.
버전이 꼬여서 새로 시작하려면 .git을 지우면 된다. 숨김폴더항목 확인할 수 있어야 볼 수 있다.

기기(컴퓨터) 1대당 토큰 1개다.

집에서 연결 방법
1. 집에서 아틀라시안 로그인 후 소스트리 다운로드 한다.
2. 반드시 새 폴더를 만든 후, 소스트리에서 clone을 누른다.

3.집에서 사용할 토큰을 또 받는다.

4. 수정 파일이 있으면 저장 후, push를 해준다
5. 다음 날 연동돼 있는 곳에서 pull을 꼭 눌러서 마지막 기록을 맞춘다.

마지막 기록을 맞춰야 문제가 안 생긴다.

create -버전관리 처음 시작할 때
clone -원격 저장소에 이미 있을 때 
add -open(이미 git으로 관리되고 있는 파일을 열겠다)


remove Bookmarks를 눌러야 한다.
(기록만 지운다.)

----------------------------------
commit 버전을 기록한다.

stage All 누른 후 커밋 메시지 남긴 후, commit 누르기
그 후에 push 업로드 누르기 

history는 버전을 보는 곳.
file은 

작업 전에는 항상 pull을 해야 한다!!
컴플리트는 코드가 꼬인 것.

리젯
홀스푸시

commit 취소
리젯 - 특정 commit을 지운다
지우고 싶은 파일 전에 거를 선택

reset은 hard를 선택해야 함

show remote branches -> 원격을 같이 보여주는 거
그다음 push를 눌러야 함

최상위 기준을 덮을 수 없다.

Force Push를 누른다.
- force push 설정
      Tool / option / Git / Enable Force push
강제로 누른다.

!!학원에서 reset을 했으면 
집에서도 같이 reset을 해준다.!!
그 후에 

reset 하고 난 후 pull이나 push를 한다.

----------------------------------
file stage 파일에서 마우스 우클릭시
add ->stage 등록
remove ->삭제
Discard ->협업할 때 사용함, 내가 작업한 게 아닌 작업물을 관리 제거해주는 것, 내 stage 목록에서 빼는 것(관리 목록에는 있음)
Ignore ->깃허브 관리 목록에서 빼는 것(영상 큰 것 등)


!!협업할 때는 pull풀을 누른 후 push푸시를 눌러야 한다.

(저장소)원격은 있는데 .git이 없을 때 clone이다.

한번 연동한 것들은 bookmark

remove bookmarks ->북마크만 삭제 
Delete repositories on Disk ->파일 자체를 다 삭제(이거 누르면 안 된다)

Add ->저장소랑 .git 다 있으면 Add.
파일로 치면 open임, 이어서 작업하려고 할 때 사용함


충돌 해결하기 위해 reset을 한다!!

시간대를 왔다 갔다 하는 것 ->체크아웃
head 옮기는 작업

체크아웃된 상태에서는 reset이 불가능하다

----------------------------------
처음 만들 때 .gitignore을 설정해야 한다.
용량이 크거가 비밀번호 같은 것들 빼야할 때 설정해야 한다.
파일이 너무 많을 때

ignore 파일을 하나 만든다.

video/
pw.txt 
이렇게 적는다.
자신이 먼저 빼야 하는 것들 저장소 연결 전에 ignore를 미리 한다

변화 상황은 수동으로 맞춰줘야 한다.
video나 pw는 usb나 구글 드라이브로 따로 가지고 다닌다.

ingore everything beneath :
폴더 자체를 무시한다
extension
확장자
filename

!!reset은 충돌 해결 목적이다!!
한번에 돌아감
굉장히 위험하다, force push
사고 나면 수습 불가

revert = reverse
차근차근 한 단계씩 돌아가야 함

revert ver3 -> ver2
이전 과거가 남아있는 것이 장점
대부분 revert 사용함

----------------------------------
폴더/
*.mp4

node_modules ->리액트 파일 많이 있음
이런 것들은 빼줘야 한다
node_modules/
.gitignore에 넣어야 함

show Remote Branches
협업할 때 중요

내가 수정 작업한 게 아닐 때는 Discard를 눌러야 한다.
Remove는 쓸 일이 없다

!!Discard 협업할 때 중요!!

파일 하나를 방향만 나눈다. 협업할 때 나눠서 작업한다.
나뭇가지 ->Branches
시간대 나뭇가지

작업하기 전에 브런치를 먼저 만들어줘야 한다!!
head를 옮기는 거 -> 체크아웃(들어가 있다)
더블클릭

1. 브런치가 다시 시작할 곳(분기점)을 체크아웃을 한다!
우클릭 -> branch -> 이름 정하고 

작업한다.
push누르고 브런치, master 다 선택후 업로드 해준다.
select All

pull한 후 해당 브런치로 이동해서 누르면(체크아웃) 브런치 생김

협업할 때만 사용해야 한다. 많으면 많을수록 충돌이 생김
(브런치가 없을수록 좋다)

최종적으로 브런치는 하나가 되어야 한다
최종 브런치는 master이다

합쳐야 한다(병합)->merge
협업할 때 사용한다.

merge 종류
1. fast foward ->차곡차곡 순서대로 돼 있는 상황 (꼬여 있지 않은 상황에서 하는 거, 마지막 브런치에서 새로운 브런치를 만들었던 상황일 때) 충돌이 안난다
2. three way merge ->과거로 돌아가서 브런치를 만든 상황(무조건 충돌이 생긴다)


체크아웃은 상위 브런치 선택 후, merge


가지 흔적들은 남아 있다
리베이스는 원격이나 협업할 때는 사용하면 안 된다!!(위험)
리베이스느 원격말고 연동 안 할 때, 나 혼자 놀 때 사용하는 거다.


브런치 지우면 똑같이 집에서도 브런치 지워줘야 한다

----------------------------------
브런치는 가급적 사용 자제
협업할 때는 사용!!

master branches의 마지막 작업을 선택
아니면 그냥 사이드바 branches의 master를 더블 클릭한다
그후에 합쳐야 하는 브런치 n 우클릭으로 merge 선택

체크인 되어 있으면 못 지운다.
그후에 n을 삭제한다
force는 위험하다

커밋 메시지 남기면 트리가 생긴다.
커밋 메시지 안 남기는 게 낫다.

동기화 때문에 집에서 브런치 지우면 회사에서도 브런치를 지워준다


내가 체크아웃이 어디 되어 있는지 확인해야 함!!

가급적이면 revert 사용하는 것이 안전하다!!
브런치는 복잡하다 
